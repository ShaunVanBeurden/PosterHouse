<?php

namespace App\Providers;

use App\Models\User;
use Illuminate\Support\Str;
use App\Observers\UserObserver;
use Laravel\Dusk\DuskServiceProvider;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\ServiceProvider;
use App\Library\Activations\ActivationToken;
use App\Library\Activations\ActivationManager;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        $this->setDefaultSchemaStringLength();

        $this->registerUserObserver();

        $this->registerImageUploader();
    }

    /**
     * Register the user observer.
     */
    private function registerUserObserver()
    {
        User::observe(UserObserver::class);
    }

    /**
     * Register the image uploader.
     */
    private function registerImageUploader()
    {
        $this->app->bind('app.image', function($app) {
            return new \App\Library\ImageUpload();
        });
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this->registerBrowserTester();

        $this->registerActivations();
    }

    /**
     * Set the default string length for the strings generated by
     * the Schemas (migrations).
     */
    private function setDefaultSchemaStringLength()
    {
        Schema::defaultStringLength(191);
    }

    /**
     * Register the browser tester service also known as Laravel Dusk.
     */
    private function registerBrowserTester()
    {
        // Only register the service provider when the app is local or
        // in testing mode.
        if ($this->app->environment('local', 'testing')) {
            $this->app->register(DuskServiceProvider::class);
        }
    }

    /**
     * Register the activation class.
     */
    private function registerActivations()
    {
        $this->app->bind('App\Library\Activations\ActivationManager', function ($app) {
            $key = $app['config']['app.key'];

            if (Str::startsWith($key, 'base64:')) {
                $key = base64_decode(substr($key, 7));
            }

            return new ActivationManager(
                new ActivationToken(
                    $app['db']->connection(),
                    $key
                )
            );
        });
    }
}
